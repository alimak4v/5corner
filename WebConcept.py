# combined_app.py
import asyncio
import json
import os
import datetime
from threading import Thread
from flask import Flask, render_template_string, request, jsonify
from telethon.sync import TelegramClient
from telethon.tl.types import PeerChannel
from openai import OpenAI
from dotenv import load_dotenv
import pytz

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
PROCESSED_MESSAGES_FILE = "processed_messages.json"
NEWS_CACHE_FILE = "news_cache.json"
WEB_NEWS_FILE = "web_news.json"
POSTING_TIMES = ["00:00"]
TARGET_CHANNEL = "@cho_tam_official"
BACKING_IMAGE = "backing.png"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞ ===
api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
phone = os.getenv("PHONE")

# === –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ===
channel_usernames = ['@fsprussia', '@truetechcommunity', '@phystechunion', '@stfpmi',
                     '@partynewpeople', '@rucodefestival', '@rozetked', '@roscosmos_gk',
                     '@miptru', '@mephi_of', '@naukamsu', '@skolkovolive', '@bmstu1830',
                     '@thecodemedia', '@t_central_university', '@techno_yandex', '@habr_com',
                     '@rosatomru', '@fpmi_students', '@innopolistg', '@vkjobs', '@tb_invest_official']

# === –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI / OpenRouter ===
try:
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π
    client_ai = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=os.getenv("OPENROUTER_API_KEY")
    )
except TypeError as e:
    # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
    client_ai = OpenAI(
        api_key=os.getenv("OPENROUTER_API_KEY"),
        base_url="https://openrouter.ai/api/v1"
    )

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
telegram_client = None
flask_app = None

# === HTML –®–ê–ë–õ–û–ù–´ ===
INDEX_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ß–¢–ê–ú –û–¢ - –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .header {
            background: white;
            border-bottom: 1px solid #e0e0e0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .search-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .search-box {
            display: flex;
            max-width: 600px;
            margin: 0 auto;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
        }

        .search-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #dfe1e5;
            border-right: none;
            border-radius: 8px 0 0 8px;
            font-size: 16px;
            outline: none;
        }

        .search-input:focus {
            border-color: #4285f4;
        }

        .search-button {
            background: #4285f4;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
            font-size: 16px;
        }

        .search-button:hover {
            background: #3367d6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .last-updated {
            text-align: center;
            color: #666;
            margin-bottom: 30px;
            font-size: 14px;
        }

        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }

        .category-card {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .category-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.12);
        }

        .category-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 16px;
            border-bottom: 2px solid #f0f0f0;
        }

        .category-emoji {
            font-size: 24px;
            margin-right: 12px;
        }

        .category-title {
            font-size: 20px;
            font-weight: 600;
            color: #1a1a1a;
        }

        .news-list {
            space-y: 16px;
        }

        .news-item {
            padding: 16px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .news-item:last-child {
            border-bottom: none;
        }

        .news-title {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
            color: #1a1a1a;
        }

        .news-title a {
            color: inherit;
            text-decoration: none;
        }

        .news-title a:hover {
            color: #4285f4;
        }

        .news-summary {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
            line-height: 1.5;
        }

        .news-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: #999;
        }

        .news-source {
            font-weight: 500;
        }

        .news-time {
            margin-left: auto;
        }

        .footer {
            text-align: center;
            padding: 40px 20px;
            color: #666;
            font-size: 14px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        @media (max-width: 768px) {
            .categories-grid {
                grid-template-columns: 1fr;
            }

            .container {
                padding: 16px;
            }

            .search-container {
                padding: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="search-container">
            <form action="/search" method="get" class="search-box">
                <input type="text" name="q" class="search-input" placeholder="–ü–æ–∏—Å–∫ –≤ Google..." value="">
                <button type="submit" class="search-button">–ù–∞–π—Ç–∏</button>
            </form>
        </div>
    </div>

    <div class="container">
        {% if news_data.last_updated %}
        <div class="last-updated">
            üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {{ news_data.last_updated }}
        </div>
        {% endif %}

        {% if news_data.categories %}
            <div class="categories-grid">
                {% for category in news_data.categories %}
                <div class="category-card">
                    <div class="category-header">
                        <span class="category-emoji">{{ category.emoji }}</span>
                        <h2 class="category-title">{{ category.title }}</h2>
                    </div>
                    <div class="news-list">
                        {% for news in category.news %}
                        <div class="news-item">
                            <h3 class="news-title">
                                <a href="{{ news.url }}" target="_blank" rel="noopener">
                                    {{ news.title }}
                                </a>
                            </h3>
                            <p class="news-summary">{{ news.summary }}</p>
                            <div class="news-meta">
                                <span class="news-source">{{ news.source }}</span>
                                <span class="news-time">{{ news.time_ago }}</span>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="loading">
                <p>–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>
            </div>
        {% endif %}
    </div>

    <div class="footer">
        <p>–ß–¢–ê–ú –û–¢ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</p>
        <p>–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</p>
        <p>¬© {{ current_year }} –ß–¢–ê–ú –û–¢</p>
    </div>

    <script>
        setTimeout(() => {
            window.location.reload();
        }, 300000);
    </script>
</body>
</html>
'''

SEARCH_TEMPLATE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü–æ–∏—Å–∫ - –ß–¢–ê–ú –û–¢</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }

        .header {
            background: white;
            border-bottom: 1px solid #e0e0e0;
            padding: 20px 0;
        }

        .search-container {
            max-width: 600px;
            margin: 0 auto;
            display: flex;
        }

        .search-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #dfe1e5;
            border-right: none;
            border-radius: 8px 0 0 8px;
            font-size: 16px;
            outline: none;
        }

        .search-button {
            background: #4285f4;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
        }

        .container {
            max-width: 800px;
            margin: 40px auto;
            padding: 0 20px;
            text-align: center;
        }

        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: #4285f4;
            text-decoration: none;
        }

        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="search-container">
            <form action="/search" method="get">
                <input type="text" name="q" class="search-input" placeholder="–ü–æ–∏—Å–∫ –≤ Google..." value="{{ query }}">
                <button type="submit" class="search-button">–ù–∞–π—Ç–∏</button>
            </form>
        </div>
    </div>

    <div class="container">
        {% if query %}
            <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: "{{ query }}"</h2>
            <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ Google...</p>
            <script>
                setTimeout(() => {
                    window.location.href = 'https://www.google.com/search?q={{ query }}';
                }, 2000);
            </script>
        {% else %}
            <h2>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</h2>
        {% endif %}

        <a href="/" class="back-link">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–æ–≤–æ—Å—Ç—è–º</a>
    </div>
</body>
</html>
'''


# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ===
def load_processed_ids():
    if os.path.exists(PROCESSED_MESSAGES_FILE):
        try:
            with open(PROCESSED_MESSAGES_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f))
        except:
            return set()
    return set()


def save_processed_ids(ids):
    with open(PROCESSED_MESSAGES_FILE, "w", encoding="utf-8") as f:
        json.dump(list(ids), f, indent=2)


def load_news_cache():
    if os.path.exists(NEWS_CACHE_FILE):
        try:
            with open(NEWS_CACHE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []


def save_news_cache(news):
    with open(NEWS_CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(news, f, indent=2, ensure_ascii=False)


def load_web_news():
    if os.path.exists(WEB_NEWS_FILE):
        try:
            with open(WEB_NEWS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

    return {
        "categories": [
            {
                "title": "–ù–æ–≤–æ—Å—Ç–∏",
                "emoji": "üì∞",
                "news": [
                    {
                        "title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ß–¢–ê–ú –û–¢!",
                        "summary": "–≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏. –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                        "source": "–ß–¢–ê–ú –û–¢",
                        "url": "#",
                        "image": "",
                        "time_ago": "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
                        "category": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
                    }
                ]
            }
        ],
        "last_updated": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "timestamp": datetime.datetime.now().isoformat()
    }


def save_web_news(news_data):
    with open(WEB_NEWS_FILE, "w", encoding="utf-8") as f:
        json.dump(news_data, f, indent=2, ensure_ascii=False, default=str)


def clear_news_cache():
    if os.path.exists(NEWS_CACHE_FILE):
        os.remove(NEWS_CACHE_FILE)
    return []


# === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π ===
def get_ai_client():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±
        return OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=os.getenv("OPENROUTER_API_KEY")
        )
    except TypeError as e:
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é OpenAI: {e}")
        return OpenAI(
            api_key=os.getenv("OPENROUTER_API_KEY"),
            base_url="https://openrouter.ai/api/v1"
        )


# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤–µ–±–∞ ===
def generate_web_news(news_items):
    if not news_items:
        return {"categories": [], "timestamp": datetime.datetime.now().isoformat()}

    prompt = (
        "–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∑–µ–Ω. "
        "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
        "–§–æ—Ä–º–∞—Ç JSON:\n"
        "{\n"
        '  "categories": [\n'
        "    {\n"
        '      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",\n'
        '      "emoji": "üéì",\n'
        '      "news": [\n'
        "        {\n"
        '          "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏",\n'
        '          "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",\n'
        '          "source": "–ò—Å—Ç–æ—á–Ω–∏–∫",\n'
        '          "url": "—Å—Å—ã–ª–∫–∞",\n'
        '          "image": "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º)",\n'
        '          "time_ago": "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",\n'
        '          "category": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"\n'
        "        }\n"
        "      ]\n"
        "    }\n"
        "  ]\n"
        "}\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- 3-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ù–∞—É–∫–∞, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å, –ö–∞—Ä—å–µ—Ä–∞)\n"
        "- –í –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 3-5 –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "- –ó–∞–≥–æ–ª–æ–≤–∫–∏: —è—Ä–∫–∏–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ, –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- –û–ø–∏—Å–∞–Ω–∏—è: –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ, –Ω–æ –∫—Ä–∞—Ç–∫–∏–µ\n"
        "- –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤\n"
        "- –°—Å—ã–ª–∫–∏: –≤ —Ñ–æ—Ä–º–∞ite t.me/channel/message_id\n"
        "- time_ago: –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X —á–∞—Å–æ–≤/–¥–Ω–µ–π –Ω–∞–∑–∞–¥'\n\n"
        "–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
    )

    for i, item in enumerate(news_items):
        prompt += f"{i + 1}. {item['text'][:200]}... | –ò—Å—Ç–æ—á–Ω–∏–∫: {item['channel_username']} | ID: {item['message_id']}\n"

    try:
        ai_client = get_ai_client()
        completion = ai_client.chat.completions.create(
            model="google/gemini-2.0-flash-exp:free",
            messages=[
                {"role": "system",
                 "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=4000,
            temperature=0.7
        )

        response_text = completion.choices[0].message.content
        response_text = response_text.replace('```json', '').replace('```', '').strip()

        news_data = json.loads(response_text)
        news_data["timestamp"] = datetime.datetime.now().isoformat()
        news_data["last_updated"] = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")

        return news_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–±-–Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return {
            "categories": [
                {
                    "title": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                    "emoji": "üöÄ",
                    "news": [
                        {
                            "title": "–ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è",
                            "summary": "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                            "source": "–°–∏—Å—Ç–µ–º–∞",
                            "url": "#",
                            "image": "",
                            "time_ago": "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
                            "category": "–°–∏—Å—Ç–µ–º–∞"
                        }
                    ]
                }
            ],
            "timestamp": datetime.datetime.now().isoformat(),
            "last_updated": datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")
        }


# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è Telegram ===
def summarize_news(news_items):
    if not news_items:
        return ""

    prompt = (
        "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown."
        "–°–≥—Ä—É–ø–ø–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ 3-5 —Ç–µ–º–∞–º. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã:\n\n"
        "1. **–ó–∞–≥–æ–ª–æ–≤–æ–∫**: 2-3 —ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–∂–∏—Ä–Ω—ã–º)\n"
        "2. **–ù–æ–≤–æ—Å—Ç–∏**: 2-4 –ø—É–Ω–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   ‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ [–∏—Å—Ç–æ—á–Ω–∏–∫](—Å—Å—ã–ª–∫–∞)\n\n"
        "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown: [—Ç–µ–∫—Å—Ç](url)\n"
        "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏\n"
        "‚Ä¢ –ë–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –¥–∞—Ç –∏ –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π\n\n"
        "**–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:**\n"
        "**üöÄ –ö–æ—Å–º–æ—Å**\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ú–°-32 –ø—Ä–∏—Å—Ç—ã–∫–æ–≤–∞–ª—Å—è –∫ –ú–ö–° [–†–æ—Å–∫–æ—Å–º–æ—Å](t.me/roscosmos_gk/18301)\n"
        "‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ [FAKY](https://old.mipt.ru/dasr/)\n"
        "\n\n"
        "**üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**\n"
        "‚Ä¢ –ù–æ–≤–∞—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –ø–æ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º [–ú–§–¢–ò](t.me/miptru/8802)\n\n"
        "–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
    )

    for i, item in enumerate(news_items):
        prompt += f"{i + 1}. {item['text']} t.me/{item['channel_username'].replace('@', '')}/{item['message_id']}\n\n"

    try:
        ai_client = get_ai_client()
        completion = ai_client.chat.completions.create(
            model="google/gemini-2.0-flash-exp:free",
            messages=[
                {"role": "system",
                 "content": "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–µ–º–∞–º."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1024,
            temperature=0.1
        )
        return completion.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ===
def collect_news():
    global telegram_client

    if telegram_client is None:
        telegram_client = TelegramClient(phone, api_id, api_hash)
        telegram_client.start()

    processed_ids = load_processed_ids()
    news_cache = load_news_cache()
    new_news_collected = False

    for username in channel_usernames:
        try:
            entity = telegram_client.get_entity(username)
            messages = telegram_client.get_messages(entity, limit=10)

            for msg in messages:
                if msg.id not in processed_ids and msg.text and msg.text.strip():
                    news_item = {
                        'text': msg.text,
                        'channel_username': username,
                        'message_id': msg.id,
                        'timestamp': datetime.datetime.now().isoformat()
                    }
                    news_cache.append(news_item)
                    processed_ids.add(msg.id)
                    new_news_collected = True
                    print(f"–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ {username}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {username}: {e}")

    if new_news_collected:
        save_news_cache(news_cache)
        save_processed_ids(processed_ids)

        web_news = generate_web_news(news_cache)
        save_web_news(web_news)
        print("–í–µ–±-–Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    return new_news_collected


# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –≤ Telegram ===
def publish_summary():
    global telegram_client

    if telegram_client is None:
        telegram_client = TelegramClient(phone, api_id, api_hash)
        telegram_client.start()

    news_cache = load_news_cache()
    if news_cache:
        print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –∏–∑ {len(news_cache)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
        summary = summarize_news(news_cache)
        now = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y")
        header = f"#–ß–ï–¢–ê–ú_–û–¢ {now}\n\n"
        full_message = header + summary
        print(full_message)

        if summary:
            try:
                if os.path.exists(BACKING_IMAGE):
                    telegram_client.send_file(
                        TARGET_CHANNEL,
                        BACKING_IMAGE,
                        caption=full_message,
                        link_preview=False
                    )
                    print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {TARGET_CHANNEL}")
                else:
                    telegram_client.send_message(
                        TARGET_CHANNEL,
                        full_message,
                        link_preview=False
                    )
                    print(f"–°–≤–æ–¥–∫–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {TARGET_CHANNEL}")
                clear_news_cache()
                print("–ö—ç—à –Ω–æ–≤–æ—Å—Ç–µ–π –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            except Exception as e:
                telegram_client.send_message(
                    TARGET_CHANNEL,
                    full_message,
                    link_preview=False
                )
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
    else:
        print("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ===
def should_post_now():
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.datetime.now(moscow_tz).strftime("%H:%M")
    return now in POSTING_TIMES


# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ—Ç–∞ ===
def bot_worker():
    print("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")

    while True:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
            collect_news()
            print(f"–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω –≤ {datetime.datetime.now().strftime('%H:%M')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if should_post_now():
                print("–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É...")
                publish_summary()

            # –ñ–¥–µ–º 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            import time
            time.sleep(3600)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            import time
            time.sleep(300)


# === –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def create_flask_app():
    app = Flask(__name__)

    @app.route('/')
    def index():
        news_data = load_web_news()
        current_year = datetime.datetime.now().year
        return render_template_string(INDEX_TEMPLATE, news_data=news_data, current_year=current_year)

    @app.route('/api/news')
    def api_news():
        news_data = load_web_news()
        return jsonify(news_data)

    @app.route('/search')
    def search():
        query = request.args.get('q', '')
        return render_template_string(SEARCH_TEMPLATE, query=query)

    return app


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    global flask_app

    print("–ó–∞–ø—É—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = Thread(target=bot_worker, daemon=True)
    bot_thread.start()

    print("2. –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    flask_app = create_flask_app()
    flask_app.run(debug=False, host='0.0.0.0', port=5000)


if __name__ == "__main__":
    main()
